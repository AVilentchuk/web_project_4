!function(){"use strict";function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function e(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var n=document.querySelector(".popup__place-name"),r=document.querySelector(".popup__img"),o=function(){function o(t,i,a){var u=this,c=t.name,l=t.link;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),e(this,"_handleImageClick",(function(t){n.textContent=u._text,r.src=u._link,r.alt="Photograph of ".concat(u._text),u.handleClickExtension(t)})),e(this,"_handleDelete",(function(){u._element.remove(),u._element=null})),e(this,"_handleLike",(function(t){t.target.classList.toggle("card__like-button_active")})),e(this,"createCard",(function(){u._element=u._cloneTemplate(),u._assignEventListeners();var t=u._element.querySelector(".card__image");return t.src=u._link,t.alt=u._text,u._element.querySelector(".card__text").textContent=u._text,u._element.querySelector(".card__overflow-tooltip").textContent=u._text,u._element})),this._text=c,this._link=l,this.selectTemplate=i,this.handleClickExtension=a}var i,a;return i=o,(a=[{key:"_cloneTemplate",value:function(){return this.selectTemplate.content.querySelector(".card").cloneNode(!0)}},{key:"_assignEventListeners",value:function(){this._element.querySelector(".card__image").addEventListener("click",this._handleImageClick),this._element.querySelector(".button_type_delete").addEventListener("click",this._handleDelete),this._element.querySelector(".card__like-button").addEventListener("click",this._handleLike)}}])&&t(i.prototype,a),o}();function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var u=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"_resetValidation",(function(){var t=r._settings.inputStatus;return r._inputList.forEach((function(e){r._deactivateError(e),e.classList.remove("".concat(t))})),r._controlSubmit(!0),r._element})),a(this,"_deactivateError",(function(t){var e=t.nextElementSibling;e.classList.remove(r._settings.inputErrorActive),e.textContent=""})),a(this,"_activateError",(function(t,e){var n=t.nextElementSibling;n.classList.add(r._settings.inputErrorActive),n.textContent=e})),a(this,"_controlSubmit",(function(t){var e=r._settings,n=e.submitSelector,o=e.disabledButton,i=r._formElement.querySelector(".".concat(n));t?(i.classList.add(o),i.setAttribute("disabled",!0)):(i.classList.remove(o),i.removeAttribute("disabled"))})),a(this,"_checkIfInputValid",(function(t){var e=t.target;e.classList.add(r._settings.inputStatus),e.validity.valid?r._deactivateError(e):r._activateError(e,e.validationMessage);var n=r._inputList.some((function(t){return!t.validity.valid}));return r._controlSubmit(n)})),a(this,"_setEventListeners",(function(){var t=r._settings.formInput;return r._inputList=Array.from(r._formElement.querySelectorAll(".".concat(t))),r._formElement.addEventListener("submit",(function(t){t.preventDefault()})),r._formElement.addEventListener("reset",r._resetValidation),r._inputList.forEach((function(t){t.addEventListener("input",r._checkIfInputValid)})),r._element})),this._settings=n,this._formElement=e}var e,n;return e=t,(n=[{key:"enableValidation",value:function(){return this._setEventListeners()}}])&&i(e.prototype,n),t}(),c=u;function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var f=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,"_handleEscClose",(function(t){"Escape"===t.code&&(n.close(),n.unsetEventListeners())})),s(this,"_handleBackgroundClose",(function(t){t.target.classList.contains("popup_active")&&n.close()})),this._popup=document.querySelector(e).parentNode}var e,n;return e=t,(n=[{key:"open",value:function(){this._popup.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_active")}},{key:"setEventListeners",value:function(){this._popup.querySelector(".button_type_close").addEventListener("click",this.close.bind(this)),this._popup.addEventListener("click",this._handleBackgroundClose)}},{key:"unsetEventListeners",value:function(){document.removeEventListener("keydown",this._handleEscClose)}}])&&l(e.prototype,n),t}();function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e,n){return _="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=b(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}},_(t,e,n||t)}function m(t,e){return m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},m(t,e)}function y(t,e){if(e&&("object"===p(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function b(t){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},b(t)}var g=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&m(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=b(r);if(o){var n=b(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return y(this,t)});function a(t,e){var n,r,o,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),u=function(t){Object.entries(t).forEach((function(t,e){var r=function(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){u=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return d(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t,2),o=(r[0],r[1]);n._inputList[e].value=o}))},(o="setInputValues")in(r=v(n=i.call(this,t)))?Object.defineProperty(r,o,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[o]=u,n.handleSubmitForm=e,n._form=n._popup.querySelector(".form"),n._inputList=n._popup.querySelectorAll(".form__input"),n}return e=a,(n=[{key:"close",value:function(){_(b(a.prototype),"close",this).call(this),this._form.reset()}},{key:"getInputValues",value:function(){var t=this;return this._inputValues={},this._inputList.forEach((function(e){t._inputValues[e.name]=e.value})),this._inputValues}},{key:"setEventListeners",value:function(){_(b(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",this.handleSubmitForm)}}])&&h(e.prototype,n),a}(f);function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function x(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function E(t,e){return E=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},E(t,e)}function k(t,e){if(e&&("object"===w(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return S(t)}function S(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function L(t,e,n){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=j(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}},L(t,e,n||t)}function j(t){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},j(t)}function C(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&E(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=j(r);if(o){var n=j(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return k(this,t)});function a(t){var e,n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),C(S(n=i.call(this,t)),"_handleEscClose",(function(t){switch(t.code){case"ArrowLeft":n._goLeft(),n._toggleArrow(n._leftArrow);break;case"ArrowRight":n._goRight(),n._toggleArrow(n._rightArrow);break;case"Escape":n.close(),L((e=S(n),j(a.prototype)),"unsetEventListeners",e).call(e)}})),C(S(n),"_navigationAssign",(function(t){n.card=t,n._leftCard=t.previousElementSibling||t.parentNode.lastChild,n._rightCard=t.nextElementSibling||t.parentNode.firstChild})),n._leftArrow=n._popup.querySelector(".navigation-arrow_left"),n._rightArrow=n._popup.querySelector(".navigation-arrow_right"),n._imageWindowPhoto=n._popup.querySelector(".popup__img"),n._imageWindowName=n._popup.querySelector(".popup__place-name"),n}return e=a,(n=[{key:"open",value:function(t){L(j(a.prototype),"open",this).call(this),this._navigationAssign(t.target.parentNode)}},{key:"_goLeft",value:function(){this._imageWindowPhoto.src=this._leftCard.querySelector(".card__image").src,this._imageWindowPhoto.alt=this._leftCard.querySelector(".card__image").alt,this._imageWindowName.textContent=this._leftCard.querySelector(".card__text").textContent,this._navigationAssign(this._leftCard)}},{key:"_goRight",value:function(){this._imageWindowPhoto.src=this._rightCard.querySelector(".card__image").src,this._imageWindowPhoto.alt=this._rightCard.querySelector(".card__image").alt,this._imageWindowName.textContent=this._rightCard.querySelector(".card__text").textContent,this._navigationAssign(this._rightCard)}},{key:"_toggleArrow",value:function(t){t.classList.add("navigation-arrow_animated");var e=1e3*parseFloat(getComputedStyle(t).transitionDuration);setTimeout((function(){return t.classList.remove("navigation-arrow_animated")}),e)}},{key:"setEventListeners",value:function(){L(j(a.prototype),"setEventListeners",this).call(this),this._rightArrow.addEventListener("click",this._goRight.bind(this)),this._leftArrow.addEventListener("click",this._goLeft.bind(this))}}])&&x(e.prototype,n),a}(f);function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var A=function(){function t(e,n){var r=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._tenderer=o,this._container=document.querySelector(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(){var t=this;this._items.forEach((function(e){t._tenderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&q(e.prototype,n),t}();function P(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var B=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=document.querySelector(e),this._job=document.querySelector(n)}var e,n;return e=t,(n=[{key:"getUserInfo",value:function(){return this._data={name:this._name.textContent,job:this._job.textContent},this._data}},{key:"setUserInfo",value:function(t){var e=t.name,n=t.job;this._name.textContent=e,this._job.textContent=n}}])&&P(e.prototype,n),t}(),I=document.querySelector(".profile__button-edit"),M=document.querySelector(".profile__button-add"),H=(document.getElementById("place-title"),document.getElementById("image-link"),{formInput:"form__input",inputStatus:"form__input_status",submitSelector:"button_type_submit",disabledButton:"button_disabled",inputErrorActive:"form__input-error_active"}),V=document.querySelector("#card-temp"),D=new B(".profile__name",".profile__job"),R=function(t){var e=new o(t,V,(function(t){W.open(t)})).createCard();N.addItem(e)},T=new g("#w-edit",(function(){D.setUserInfo(T.getInputValues()),T.close()}));T.setEventListeners();var G=new g("#w-add",(function(){var t=G.getInputValues();R(t),G.close()}));G.setEventListeners();var W=new O("#w-img");W.setEventListeners(),document.querySelectorAll(".form").forEach((function(t){(t=new c(t,H)).enableValidation()}));var N=new A({items:[{name:"Gasadalur, Faroe Islands",link:"https://images.unsplash.com/photo-1520769490916-8c754d52b8e0?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80"},{name:"Vũng Tàu, Ba Ria - Vung Tau, Vietnam",link:"https://images.unsplash.com/photo-1583647515542-f129dd697638?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1955&q=80"},{name:"Torres del Paine National Park, Chile",link:"https://images.unsplash.com/photo-1478827387698-1527781a4887?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1950&q=80"},{name:"Budapest, Hungary",link:"https://images.unsplash.com/photo-1541343672885-9be56236302a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=634&q=80"},{name:"San Quirico d'Orcia, Italy",link:"https://images.unsplash.com/photo-1516108317508-6788f6a160e4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1834&q=80"},{name:"Lago di Braies, Italy",link:"https://images.unsplash.com/photo-1482192505345-5655af888cc4?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2000&q=80"},{name:"Fujiyoshida, Japan",link:"https://images.unsplash.com/photo-1526481280693-3bfa7568e0f3?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80"},{name:"Kyoto, Japan",link:"https://images.unsplash.com/photo-1545569341-9eb8b30979d9?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80"}],renderer:function(t){R(t)}},".locations");N.renderItems(),I.addEventListener("click",(function(){T.setInputValues(D.getUserInfo()),T.open()})),M.addEventListener("click",(function(){return G.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,